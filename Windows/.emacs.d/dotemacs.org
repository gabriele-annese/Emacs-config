#+TITLE: Emacs Configuration
#+AUTHOR: Gabriele Annese
#+PROPERTY: header-args :tangle init.el

* Startup

#+begin_src emacs-lisp
  (setq os-packages-path "C:\\gabri\\.emacs.d\\emacs_packages")
  (setq vc-follow-symlinks t)
  (prefer-coding-system 'utf-8-unix)
#+end_src

#+begin_src emacs-lisp
  (add-to-list 'load-path
	    (concat os-packages-path "use-package/"))

  ;; per spacemacs theme
  (add-to-list 'load-path "C:\\gabri\\.emacs.d\\emacs_themes\\spacemacs-theme-20230530.1751")
#+end_src

* Packages

#+begin_src emacs-lisp
  (package-initialize)
  (require 'use-package)
#+end_src

#+begin_src emacs-lisp
      (use-package package
	:config
	(setq package-archive-priorities
	      '(("melpa-stable" .2)
		("MELPA" .1)
		("gnu" .0)))
	(setq package-archives
	      '(("melpa-stable" . "https://stable.melpa.org/packages/")
		("MELPA" . "https://melpa.org/packages/")
		("gnu" . "http://elpa.gnu.org/packages/")
		("gnu-devel" . "https://elpa.gnu.org/devel/")))
	)
#+end_src

** Themes

#+begin_src emacs-lisp
  (add-to-list 'custom-theme-load-path  "C:\\gabri\\.emacs.d\\emacs_themes\\spacemacs-theme-20230530.1751")
  (load-theme 'spacemacs-dark t)
#+end_src

#+begin_src emacs-lisp
  (use-package org-bullets
    :ensure t
    :hook
    (org-mode . org-bullets-mode)

    :config
    (setq org-bullets-face-name (quote org-bullets-face))
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))

    (setq org-bullets-bullet-list '("✙" "✞" "✟" "✝" "†" "✠" "✚" "✜" "✛" "✢" "✣" "✤" "✥"))
   )	   
#+end_src

** Company
#+begin_src emacs-lisp
  (use-package company
  :ensure t
  :defer t
  :config
  (setq company-idle-delay 0)
  (setq company-minimum-prefix-lenght 3)
  (setq company-selection-wrap-around t)
  (company-tng-configure-default)
  (setq company-quickhelp-color-background "#4F4F4F")
  (setq company-quickhelp-colo-foreground "#DCDCCC")

  (global-company-mode 1))
#+end_src

** Ivy

#+begin_src emacs-lisp
  (use-package ivy
  :ensure t
  :config
  (ivy-mode 1)
  (setq ivy-re-builders-alist
	  '((swiper . ivy--regex-plus)
	    (t      . ivy--regex-fuzzy)))
 )
#+end_src


#+begin_src emacs-lisp
 (use-package swiper
    :ensure t
    :config
    (global-set-key "\C-s" 'swiper)
  )
#+end_src

** Window
#+begin_src emacs-lisp
  (use-package beacon
    :ensure t
    :config
    (beacon-mode 1))
#+end_src

** Misc
#+begin_src emacs-lisp
  (use-package all-the-icons
    :ensure t)
#+end_src

#+begin_src emacs-lisp
  (use-package nyan-mode
    :ensure t
    :config
    (nyan-mode)
    )
#+end_src

* General
#+begin_src emacs-lisp
  ;; Simple type 'y' for 'yes' and 'n' for 'no'.
  (defalias 'yes-or-no-p
    'y-or-n-p)
#+end_src

#+begin_src emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)

  ;; Set global value for paragraph width
  (setq-default fill-column 70)

  ;; Stop emacs from losing informations.
  (setq undo-limit 20000000)
  (setq undo-strong-limit 40000000)

  ;; Smooth scroll
  (setq scroll-step 3)
  (setq line-number-mode t)
  (setq inhibit-startup-screen t)
  (setq ring-bell-function (quote ignore))

  ;; Display Clock 
  (display-time)
  (scroll-bar-mode -1)
  (menu-bar-mode -1)

  ;; Turn off the toolbar
  (tool-bar-mode 0)

  ;; add column number in the main bar
  (column-number-mode)

  (global-visual-line-mode)
#+end_src

* File Exts
#+begin_src emacs-lisp
   (setq auto-mode-alist
	  (append
	   '(("\\.cpp$"    . c++-mode)
	     ("\\.hin$"    . c++-mode)
	     ("\\.cin$"    . c++-mode)
	     ("\\.inl$"    . c++-mode)
	     ("\\.rdc$"    . c++-mode)
	     ("\\.h$"      . c++-mode)
	     ("\\.c$"      . c++-mode)
	     ("\\.cc$"     . c++-mode)
	     ("\\.c8$"     . c++-mode)
	     ("\\.txt$"    . indented-text-mode)
	     ("\\.emacs$"  . emacs-lisp-mode)
	     ("\\.gen$"    . gen-mode)
	     ("\\.ms$"     . fundamental-mode)
	     ("\\.m$"      . objc-mode)
	     ("\\.mm$"     . objc-mode)
	     ("\\.asm$"    . asm86-mode)
	     ("\\.inc$"    . asm86-mode)
	     ) auto-mode-alist))
#+end_src

#+begin_src emacs-lisp
   (setq auto-mode-alist
	  (append
	   '((".offlineimaprc"   . conf-mode)
	     (".moc.conf"        . conf-mode)
	     ("github_blog.prf"  . conf-mode)
	     ("knwl_org.prf"     . conf-mode)
	     ("public_org.prf"   . conf-mode)
	     ("i3config"         . conf-mode)
	     (".i3blocks.conf"   . conf-mode)
	     (".compton.conf"    . conf-mode)
	     (".gitconfig"       . conf-mode)
	     ) auto-mode-alist))
#+end_src

* Colored Texts
#+begin_src emacs-lisp
 ;; -------------------------------
 ;; Colored text
 ;; -------------------------------
 (setq fixme-modes '(c++-mode c-mode emacs-lisp-mode latex-mode scheme-mode python-mode))
 (make-face 'font-lock-fixme-face)
 (make-face 'font-lock-note-face)
 (make-face 'font-lock-important-face)
 (make-face 'font-lock-debug-face)

 (mapc (lambda (mode)
	     (font-lock-add-keywords
	      mode
	      '(("\\<\\(TODO\\)" 1 'font-lock-fixme-face t)
		("\\<\\(DEBUG\\)" 1 'font-lock-debug-face t)
		("\\<\\(IMPORTANT\\)" 1 'font-lock-important-face t)
		("\\<\\(NOTE\\)" 1 'font-lock-note-face t))))
	   fixme-modes)

 (modify-face 'font-lock-fixme-face "Magenta" nil nil t nil t nil nil)
 (modify-face 'font-lock-debug-face "DarkOrange" nil nil t nil t nil nil)
 (modify-face 'font-lock-important-face "Red" nil nil t nil t nil nil)
 (modify-face 'font-lock-note-face "DeepSkyBlue" nil nil t nil t nil nil)
#+end_src

* My Functions

Gestisci espostazione automatica del codice elisp tramite *org-babel-tangle*.

#+begin_src emacs-lisp
  (defun my/tangle-dotfiles()
     (interactive)
    (when (equal (buffer-file-name)
		 (expand-file-name "C:\\gabri\\.emacs.d\\dotemacs.org"))
      (org-babel-tangle)
      (message "Dotfile tangle")	       
    ))
#+end_src

* Hooks
#+begin_src emacs-lisp
  (add-hook 'after-save-hook #'my/tangle-dotfiles)
#+end_src
